// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: EventService.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyServClient is the client API for MyServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyServClient interface {
	CreateEvent(ctx context.Context, in *ForCreate, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateEvent(ctx context.Context, in *ForUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEvent(ctx context.Context, in *ForDelete, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEventByDate(ctx context.Context, in *StartDate, opts ...grpc.CallOption) (*Events, error)
	GetEventMonth(ctx context.Context, in *StartDate, opts ...grpc.CallOption) (*Events, error)
	GetEventWeek(ctx context.Context, in *StartDate, opts ...grpc.CallOption) (*Events, error)
}

type myServClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServClient(cc grpc.ClientConnInterface) MyServClient {
	return &myServClient{cc}
}

func (c *myServClient) CreateEvent(ctx context.Context, in *ForCreate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.myServ/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServClient) UpdateEvent(ctx context.Context, in *ForUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.myServ/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServClient) DeleteEvent(ctx context.Context, in *ForDelete, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.myServ/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServClient) GetEventByDate(ctx context.Context, in *StartDate, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/event.myServ/GetEventByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServClient) GetEventMonth(ctx context.Context, in *StartDate, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/event.myServ/GetEventMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServClient) GetEventWeek(ctx context.Context, in *StartDate, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/event.myServ/GetEventWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServServer is the server API for MyServ service.
// All implementations must embed UnimplementedMyServServer
// for forward compatibility
type MyServServer interface {
	CreateEvent(context.Context, *ForCreate) (*empty.Empty, error)
	UpdateEvent(context.Context, *ForUpdate) (*empty.Empty, error)
	DeleteEvent(context.Context, *ForDelete) (*empty.Empty, error)
	GetEventByDate(context.Context, *StartDate) (*Events, error)
	GetEventMonth(context.Context, *StartDate) (*Events, error)
	GetEventWeek(context.Context, *StartDate) (*Events, error)
	mustEmbedUnimplementedMyServServer()
}

// UnimplementedMyServServer must be embedded to have forward compatible implementations.
type UnimplementedMyServServer struct {
}

func (UnimplementedMyServServer) CreateEvent(context.Context, *ForCreate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedMyServServer) UpdateEvent(context.Context, *ForUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedMyServServer) DeleteEvent(context.Context, *ForDelete) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedMyServServer) GetEventByDate(context.Context, *StartDate) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByDate not implemented")
}
func (UnimplementedMyServServer) GetEventMonth(context.Context, *StartDate) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventMonth not implemented")
}
func (UnimplementedMyServServer) GetEventWeek(context.Context, *StartDate) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventWeek not implemented")
}
func (UnimplementedMyServServer) mustEmbedUnimplementedMyServServer() {}

// UnsafeMyServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServServer will
// result in compilation errors.
type UnsafeMyServServer interface {
	mustEmbedUnimplementedMyServServer()
}

func RegisterMyServServer(s grpc.ServiceRegistrar, srv MyServServer) {
	s.RegisterService(&MyServ_ServiceDesc, srv)
}

func _MyServ_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.myServ/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServServer).CreateEvent(ctx, req.(*ForCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServ_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.myServ/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServServer).UpdateEvent(ctx, req.(*ForUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServ_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.myServ/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServServer).DeleteEvent(ctx, req.(*ForDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServ_GetEventByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServServer).GetEventByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.myServ/GetEventByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServServer).GetEventByDate(ctx, req.(*StartDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServ_GetEventMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServServer).GetEventMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.myServ/GetEventMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServServer).GetEventMonth(ctx, req.(*StartDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyServ_GetEventWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServServer).GetEventWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.myServ/GetEventWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServServer).GetEventWeek(ctx, req.(*StartDate))
	}
	return interceptor(ctx, in, info, handler)
}

// MyServ_ServiceDesc is the grpc.ServiceDesc for MyServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.myServ",
	HandlerType: (*MyServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _MyServ_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _MyServ_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _MyServ_DeleteEvent_Handler,
		},
		{
			MethodName: "GetEventByDate",
			Handler:    _MyServ_GetEventByDate_Handler,
		},
		{
			MethodName: "GetEventMonth",
			Handler:    _MyServ_GetEventMonth_Handler,
		},
		{
			MethodName: "GetEventWeek",
			Handler:    _MyServ_GetEventWeek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EventService.proto",
}
